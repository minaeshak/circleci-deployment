version: 2.1
commands:

  destroy_environment:
    steps:
      - run:
          name: "Delete Stack"
          command: |
            aws cloudformation delete-stack --stack-name my-stack
          when: on_fail
jobs:
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["57:b5:3c:2c:80:24:a1:1a:80:3e:28:e6:8c:81:01:39"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: ssh configure
          command: |
           echo "[defaults]" > ~/.ansible.cfg
      - run:
          name: ssh configure 2
          command: |
           echo "host_key_checking = False" >>  ~/.ansible.cfg
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt main-remote.yaml

  create_ec2:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Stack from template
          command: |
            aws cloudformation deploy \
              --template-file template.yaml \
              --stack-name my-stack 

  smoke_test:
    docker:
      - image: amazon/aws-cli

              --template-file template.yml \
              --stack-name my-stack 
    steps:
      - run: apk add --update curl
      - run:
          name: "smoke test"
          command: |
            return 1

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

get_last_deployment_id:
  docker:
    - image: amazon/aws-cli
  steps:
    - checkout
    - run: yum install -y tar gzip
    - run:
        name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
        command: |
          aws cloudformation \
          list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
          --no-paginate --output text > ~/textfile.txt
    - persist_to_workspace:
        root: ~/
        paths: 
          - textfile.txt 
 
promote_to_production:
  docker:
    - image: amazon/aws-cli
  steps:
    - checkout
    - run:
        name: Execute cloudfront.yml
        command: |
          aws cloudformation deploy \
          --template-file cloudfront.yml \
          --stack-name production-distro \
          --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

clean_up_old_front_end:
  docker:
    - image: amazon/aws-cli
  steps:
    - checkout
    - run: yum install -y tar gzip
    - attach_workspace:
        at: ~/
    - run:
        name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
        # Use $OldBucketID environment variable or mybucket644752792305 below.
        # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
        command: |
          export OldBucketID=$(cat ~/textfile.txt)
          aws s3 rm "s3://${OldBucketID}" --recursive
        #  aws cloudformation delete-stack --stack-name production-distro 
        #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
        #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}



workflows:
  my_workflow:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end


